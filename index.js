const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const express = require('express');
const cron = require('node-cron');
const { MongoClient } = require('mongodb');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä—Ü–∏—è (–∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
const config = {
    telegramToken: process.env.TELEGRAM_BOT_TOKEN, // –ü–æ–ª—É—á–∏—Ç–µ —É @BotFather
    openaiApiKey: process.env.OPENAI_API_KEY,      // –í–∞—à OpenAI API –∫–ª—é—á
    adminTelegramId: process.env.ADMIN_TELEGRAM_ID, // –í–∞—à Telegram ID –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    mongoUrl: process.env.MONGODB_URL || 'mongodb://localhost:27017/skillhunter', // MongoDB URL
    port: process.env.PORT || 3000
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const bot = new TelegramBot(config.telegramToken, { polling: true });
const openai = new OpenAI({ apiKey: config.openaiApiKey });
const app = express();

// MongoDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
let db;
let dialogsCollection;

async function connectToMongoDB() {
    try {
        const client = new MongoClient(config.mongoUrl);
        await client.connect();
        db = client.db('skillhunter');
        dialogsCollection = db.collection('dialogs');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MongoDB');
        
        // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ userId
        await dialogsCollection.createIndex({ userId: 1 });
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error);
        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ö—Ä–∞–Ω–∏–ª–∏—â—É
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏');
        db = null;
    }
}

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –∏ MongoDB
const database = {
    conversations: new Map(), // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    dailyStats: {
        totalConversations: 0,
        successfulConversations: 0,
        date: new Date().toDateString()
    },
    successfulCases: [] // –î–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserDialog(userId, conversation) {
    try {
        if (db && dialogsCollection) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ MongoDB
            await dialogsCollection.replaceOne(
                { userId: userId },
                {
                    userId: userId,
                    ...conversation,
                    updatedAt: new Date()
                },
                { upsert: true }
            );
            console.log(`üíæ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ MongoDB`);
        } else {
            // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            database.conversations.set(userId, conversation);
            console.log(`üíæ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:', error);
        // Fallback –∫ –ø–∞–º—è—Ç–∏
        database.conversations.set(userId, conversation);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserDialog(userId) {
    try {
        if (db && dialogsCollection) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ MongoDB
            const conversation = await dialogsCollection.findOne({ userId: userId });
            if (conversation) {
                console.log(`üìñ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ MongoDB (${conversation.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
                return conversation;
            }
        } else {
            // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            const conversation = database.conversations.get(userId);
            if (conversation) {
                console.log(`üìñ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏ (${conversation.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
                return conversation;
            }
        }
        
        console.log(`üÜï –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞:', error);
        // Fallback –∫ –ø–∞–º—è—Ç–∏
        const conversation = database.conversations.get(userId);
        if (conversation) {
            return conversation;
        }
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
async function getAllDialogs() {
    try {
        if (db && dialogsCollection) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ MongoDB
            const dialogs = await dialogsCollection.find({}).toArray();
            return dialogs.map(d => ({ userId: d.userId, conversation: d }));
        } else {
            // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            const dialogs = [];
            for (const [userId, conversation] of database.conversations) {
                dialogs.push({ userId, conversation });
            }
            return dialogs;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤:', error);
        return [];
    }
}

// –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ Skill Hunter
const companyKnowledge = `
–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ö–û–ú–ü–ê–ù–ò–ò:
–ù–∞–∑–≤–∞–Ω–∏–µ: Skill Hunter
–ü—Ä–æ–¥—É–∫—Ç: AI-—Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏

–ß–¢–û –¢–ê–ö–û–ï SKILL HUNTER:
Skill Hunter ‚Äî —ç—Ç–æ AI-—Å–µ—Ä–≤–∏—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç, –ø—Ä–æ–π–¥—ë—Ç –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫.
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ (—Ç–µ–∫—Å—Ç, –∞—É–¥–∏–æ, Zoom, Telegram) –∏ –≤—ã—è–≤–ª—è–µ—Ç –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏, 
–∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –≤–∏–¥–Ω—ã –≤ —Ä–µ–∑—é–º–µ –∏ –¥–∞–∂–µ –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–∏.

–ê–ù–ê–õ–ò–ó–ò–†–£–ï–¢:
- –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –æ–±—É—á–∞–µ–º–æ—Å—Ç—å, —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å
- —Ñ–∞—Å–∞–¥–Ω—É—é –≤–µ–∂–ª–∏–≤–æ—Å—Ç—å –∏ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω–æ—Å—Ç—å
- —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º –∏ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–†–ï–ó–£–õ–¨–¢–ê–¢:
- –í–µ—Ä–¥–∏–∫—Ç: –ü–æ–¥—Ö–æ–¥–∏—Ç / –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ / –ù–µ –ø–æ–¥—Ö–æ–¥–∏—Ç
- –û—Ü–µ–Ω–∫–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º –º–µ—Ç—Ä–∏–∫–∞–º (–æ—Ç 1 –¥–æ 5)
- –ü–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ —Å —Ü–∏—Ç–∞—Ç–∞–º–∏
- –¢–µ—Å—Ç –Ω–∞ –¥–æ–≤–µ—Ä–∏–µ: –º–æ–∂–Ω–æ –ª–∏ –ø–æ—Ä—É—á–∏—Ç—å—Å—è –∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –Ω–∞ 1‚Äì2 –≥–æ–¥–∞

–§–£–ù–ö–¶–ò–û–ù–ê–õ:
- –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: —Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, Zoom-–∑–∞–ø–∏—Å–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–æ 50 –ø–æ–≤–µ–¥–µ–Ω—á–µ—Å–∫–∏—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
- –í—ã–¥–∞—ë—Ç –≥–æ—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å –≤–µ—Ä–¥–∏–∫—Ç–æ–º, –±–µ–∑ —É—á–∞—Å—Ç–∏—è HR
- –†–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–æ: –æ—Ç –∏–Ω—Ç–µ—Ä–≤—å—é –¥–æ –æ—Ç—á—ë—Ç–∞ ‚Äî 3 –º–∏–Ω—É—Ç—ã
- –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å hh.ru, CRM –∏ ATS (–Ω–∞ —Ç–∞—Ä–∏—Ñ–∞—Ö —Å API)

–≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨:
- –¢–æ—á–Ω–æ—Å—Ç—å –≤—ã—à–µ 89% –ø–æ —Ä–µ—Ç—Ä–æ—Å–ø–µ–∫—Ç–∏–≤–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É (400+ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)
- –ü–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –Ω–∞–π–º–∞ "–Ω–µ —Ç–µ—Ö" –ª—é–¥–µ–π –µ—â—ë –¥–æ –≤—ã—Ö–æ–¥–∞ –≤ —Ä–∞–±–æ—Ç—É
- –ü–æ–∑–≤–æ–ª—è–µ—Ç HR —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–æ 20 —á–∞—Å–æ–≤ –≤ –º–µ—Å—è—Ü –Ω–∞ —Ä—É—á–Ω–æ–π –æ—Ü–µ–Ω–∫–µ –∏–Ω—Ç–µ—Ä–≤—å—é

–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú:
- 46% —É–≤–æ–ª—å–Ω–µ–Ω–∏–π –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –∏–∑-–∑–∞ –ø—Ä–æ–±–ª–µ–º —Å soft skills
- 82% HR-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –ø—Ä–∏–∑–Ω–∞—é—Ç, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ soft skills ‚Äî —Å–∞–º–∞—è —Å–ª–æ–∂–Ω–∞—è —á–∞—Å—Ç—å –ø–æ–¥–±–æ—Ä–∞
- 1 –∏–∑ 3 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫
- –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –Ω–∞–π–º–∞ ‚Äî –æ—Ç 500 000 –¥–æ 3 –º–ª–Ω —Ä—É–±–ª–µ–π

–¢–ê–†–ò–§–´:
- –¢–µ—Å—Ç-–¥—Ä–∞–π–≤ ‚Äî 0 ‚ÇΩ / 10 –∏–Ω—Ç–µ—Ä–≤—å—é
- –°—Ç–∞—Ä—Ç ‚Äî 5 000 ‚ÇΩ / 10 –∏–Ω—Ç–µ—Ä–≤—å—é
- –ë–∞–∑–æ–≤—ã–π ‚Äî 25 000 ‚ÇΩ / –º–µ—Å / 100 –∏–Ω—Ç–µ—Ä–≤—å—é
- –ö–æ–º–∞–Ω–¥–Ω—ã–π ‚Äî –∫–∞—Å—Ç–æ–º–Ω—ã–π, —Å API –∏ –¥–æ–æ–±—É—á–µ–Ω–∏–µ–º

–î–õ–Ø –ö–û–ì–û –ü–û–õ–ï–ó–ù–û:
HR-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞–º: –ê–Ω–∞–ª–∏–∑ –¥–æ 10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ, –≤–∏–¥–Ω—ã —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏
–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö –µ—â—ë –¥–æ –≤—ã—Ö–æ–¥–∞, —Å–Ω–∏–∂–µ–Ω–∏–µ —Ç–µ–∫—É—á–µ—Å—Ç–∏
–û—Å–Ω–æ–≤–∞—Ç–µ–ª—è–º: –≠–∫–æ–Ω–æ–º–∏—è –¥–æ 3 –º–ª–Ω ‚ÇΩ –≤ –≥–æ–¥, –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–∏

–°–¢–†–ê–¢–ï–ì–ò–Ø –ü–†–û–î–ê–ñ:
1. –í—ã—è–≤–∏—Ç—å –±–æ–ª–∏ –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–∞–π–º–µ (—Ç–µ–∫—É—á–µ—Å—Ç—å, –¥–æ–ª–≥–∏–π –ø–æ–∏—Å–∫, –æ—à–∏–±–∫–∏ –Ω–∞–π–º–∞)
2. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–±–ª–µ–º (46% —É–≤–æ–ª—å–Ω–µ–Ω–∏–π –∏–∑-–∑–∞ soft skills)
3. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ (89% —Ç–æ—á–Ω–æ—Å—Ç—å, —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 3 –º–ª–Ω)
4. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ (10 –∏–Ω—Ç–µ—Ä–≤—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
5. –†–∞–±–æ—Ç–∞—Ç—å —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏ –∫–µ–π—Å–∞–º–∏
6. –ó–∞–∫—Ä—ã–≤–∞—Ç—å –Ω–∞ —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é
`;

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const welcomeMessage = "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –Ø –ò–ò —Ä–µ–∫—Ä—É—Ç–µ—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞. –Ø –∑–Ω–∞—é, –∫—Ç–æ –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω—ã–π —Å—Ä–æ–∫. –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –º–æ–π —Å–µ–∫—Ä–µ—Ç?";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
function isSuccessfulConversation(messages) {
    const successKeywords = [
        '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç', '—Å–∞–π—Ç', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–¥–µ–º–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', 
        '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–∫–∞–∫ –∫—É–ø–∏—Ç—å', '–ø–æ–∫—É–ø–∫–∞',
        '–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω', '–ø–æ–¥—Ö–æ–¥–∏—Ç', '–Ω—É–∂–Ω–æ', '—Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
        '–∫–æ–≥–¥–∞ –º–æ–∂–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Å–≤—è–∑–∞—Ç—å—Å—è',
        '—Ç–µ—Å—Ç-–¥—Ä–∞–π–≤', '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ',
        '—Ç–∞—Ä–∏—Ñ—ã', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–æ–¥–∫–ª—é—á–∏—Ç—å', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
        'api', '–≤–Ω–µ–¥—Ä–∏—Ç—å', '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å',
        '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
    ];
    
    const lastMessages = messages.slice(-5); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π  
    return lastMessages.some(msg => 
        msg.role === 'user' && 
        successKeywords.some(keyword => 
            msg.content.toLowerCase().includes(keyword)
        )
    );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
function createSystemPrompt() {
    let learningPrompt = '';
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞–Ω–∏—è –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤
    if (database.successfulCases.length > 0) {
        const recentSuccessfulCases = database.successfulCases.slice(-3);
        learningPrompt = `
–£–°–ü–ï–®–ù–´–ï –°–¢–†–ê–¢–ï–ì–ò–ò (—É—á–∏—Ç–µ—Å—å –Ω–∞ —ç—Ç–∏—Ö –ø—Ä–∏–º–µ—Ä–∞—Ö):
${recentSuccessfulCases.map(successCase => `
- –ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã: ${successCase.keyPhrases.join(', ')}
- –†–µ–∑—É–ª—å—Ç–∞—Ç: ${successCase.outcome}
- –í—Ä–µ–º—è –¥–æ —É—Å–ø–µ—Ö–∞: ${successCase.timeToSuccess} —Å–æ–æ–±—â–µ–Ω–∏–π
`).join('\n')}
`;
    }

    return `${companyKnowledge}

${learningPrompt}

–ò–ù–°–¢–†–£–ö–¶–ò–ò:
- –í—ã AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏ Skill Hunter
- –û–±—â–∞–π—Ç–µ—Å—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ
- –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –∫–ª–∏–µ–Ω—Ç–∞ –≤ –Ω–∞–π–º–µ
- –ü–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–ª—å–∑—É –∏ ROI (89% —Ç–æ—á–Ω–æ—Å—Ç—å, —ç–∫–æ–Ω–æ–º–∏—è –¥–æ 3 –º–ª–Ω ‚ÇΩ)
- –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç-–¥—Ä–∞–π–≤ (10 –∏–Ω—Ç–µ—Ä–≤—å—é –±–µ—Å–ø–ª–∞—Ç–Ω–æ)
- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞–Ω–∏—è –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤ –≤—ã—à–µ
- –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–°–ï–ô –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
function convertToOpenAIMessages(conversationHistory) {
    const messages = [
        {
            role: "system",
            content: createSystemPrompt()
        }
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    conversationHistory.forEach(msg => {
        if (msg.role === 'user' || msg.role === 'assistant') {
            messages.push({
                role: msg.role,
                content: msg.content
            });
        }
    });

    return messages;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    const userId = msg.from.id;
    const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const userMessage = msg.text;
    const timestamp = new Date();

    // –ö–æ–º–∞–Ω–¥–∞ /start
    if (userMessage === '/start') {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        let conversation = await loadUserDialog(userId);
        
        if (!conversation) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            conversation = {
                userId: userId,
                userName: userName,
                messages: [],
                isSuccessful: false,
                startTime: timestamp,
                lastActivity: timestamp
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (database.dailyStats.date !== timestamp.toDateString()) {
                database.dailyStats = {
                    totalConversations: 1,
                    successfulConversations: 0,
                    date: timestamp.toDateString()
                };
            } else {
                database.dailyStats.totalConversations++;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            conversation.messages.push({ 
                role: 'assistant', 
                content: welcomeMessage, 
                timestamp: timestamp 
            });
            
            await bot.sendMessage(userId, welcomeMessage);
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
            await bot.sendMessage(userId, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?");
        }

        conversation.lastActivity = timestamp;
        await saveUserDialog(userId, conversation);
        return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let conversation = await loadUserDialog(userId);
    
    if (!conversation) {
        // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        conversation = {
            userId: userId,
            userName: userName,
            messages: [],
            isSuccessful: false,
            startTime: timestamp,
            lastActivity: timestamp
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation.messages.push({ 
            role: 'assistant', 
            content: welcomeMessage, 
            timestamp: timestamp 
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conversation.messages.push({ 
        role: 'user', 
        content: userMessage, 
        timestamp: timestamp 
    });
    conversation.lastActivity = timestamp;

    try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
        const messages = convertToOpenAIMessages(conversation.messages);

        console.log(`üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç)`);
        console.log(`üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏:`, 
            conversation.messages.slice(-3).map(m => `${m.role}: ${m.content.substring(0, 50)}...`)
        );

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI —Å –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–µ–π
        const response = await openai.chat.completions.create({
            model: 'gpt-3.5-turbo',
            messages: messages,
            max_tokens: 500,
            temperature: 0.7
        });

        const botResponse = response.choices[0].message.content;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        conversation.messages.push({ 
            role: 'assistant', 
            content: botResponse, 
            timestamp: timestamp 
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
        if (!conversation.isSuccessful && isSuccessfulConversation(conversation.messages)) {
            conversation.isSuccessful = true;
            database.dailyStats.successfulConversations++;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –∫–µ–π—Å –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
            const successfulCase = {
                userId: userId,
                timeToSuccess: conversation.messages.length,
                keyPhrases: extractKeyPhrases(conversation.messages),
                outcome: '–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å',
                timestamp: timestamp
            };
            database.successfulCases.push(successfulCase);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤
            if (database.successfulCases.length > 50) {
                database.successfulCases.shift();
            }

            console.log(`üéØ –£—Å–ø–µ—à–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} (${userName})`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        await saveUserDialog(userId, conversation);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(userId, botResponse);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        await bot.sendMessage(userId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
function extractKeyPhrases(messages) {
    const userMessages = messages.filter(msg => msg.role === 'user');
    const lastUserMessages = userMessages.slice(-3);
    
    const keyWords = [];
    lastUserMessages.forEach(msg => {
        const words = msg.content.toLowerCase().split(' ');
        words.forEach(word => {
            if (word.length > 4 && !keyWords.includes(word)) {
                keyWords.push(word);
            }
        });
    });
    
    return keyWords.slice(0, 10); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 18:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (GMT+3)
cron.schedule('0 18 * * *', async () => {
    const today = new Date().toDateString();
    const stats = database.dailyStats;
    
    if (stats.date === today) {
        const conversionRate = stats.totalConversations > 0 
            ? Math.round((stats.successfulConversations / stats.totalConversations) * 100)
            : 0;

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–æ–≤
        const allDialogs = await getAllDialogs();
        const totalUsers = allDialogs.length;
        const successfulUsers = allDialogs.filter(d => d.conversation.isSuccessful).length;

        const reportMessage = `üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢
üìÖ –î–∞—Ç–∞: ${today}
üí¨ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.totalConversations}
‚úÖ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: ${stats.successfulConversations} —á–µ–ª–æ–≤–µ–∫
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞ –¥–µ–Ω—å: ${conversionRate}%

üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üéØ –£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: ${successfulUsers}
üìä –û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: ${totalUsers > 0 ? Math.round((successfulUsers / totalUsers) * 100) : 0}%

${stats.successfulConversations > 0 ? 'üéØ –£—Å–ø–µ—à–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å–µ–≥–æ–¥–Ω—è!' : 'üîÑ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'}`;

        try {
            await bot.sendMessage(config.adminTelegramId, reportMessage);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
        }
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    console.error('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error);
});

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com
app.use(express.json());

app.get('/', (req, res) => {
    res.send('Telegram Sales Bot —Ä–∞–±–æ—Ç–∞–µ—Ç!');
});

app.get('/dialogs', async (req, res) => {
    try {
        const allDialogs = await getAllDialogs();
        
        let html = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–î–∏–∞–ª–æ–≥–∏ Skill Hunter Bot</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .dialog { background: white; margin: 20px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .dialog-header { background: #2196F3; color: white; padding: 10px; margin: -20px -20px 20px -20px; border-radius: 8px 8px 0 0; }
                .message { margin: 10px 0; padding: 10px; border-radius: 5px; }
                .user-message { background: #e3f2fd; border-left: 4px solid #2196F3; }
                .bot-message { background: #f3e5f5; border-left: 4px solid #9c27b0; }
                .timestamp { font-size: 12px; color: #666; }
                .success { color: #4caf50; font-weight: bold; }
                .stats { background: #fff; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                .storage-info { background: #fff3cd; padding: 10px; border-radius: 5px; margin-bottom: 20px; border-left: 4px solid #ffc107; }
            </style>
        </head>
        <body>
            <div class="storage-info">
                <strong>üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ:</strong> ${db ? 'MongoDB (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ)' : '–ü–∞–º—è—Ç—å (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)'}
            </div>
            <div class="stats">
                <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ Skill Hunter</h1>
                <p><strong>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> ${allDialogs.length}</p>
                <p><strong>–£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:</strong> ${allDialogs.filter(d => d.conversation.isSuccessful).length}</p>
                <p><strong>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</strong> ${allDialogs.length > 0 ? Math.round((allDialogs.filter(d => d.conversation.isSuccessful).length / allDialogs.length) * 100) : 0}%</p>
            </div>
        `;
        
        allDialogs.forEach(({userId, conversation}) => {
            const lastActivity = new Date(conversation.lastActivity || conversation.startTime).toLocaleString('ru-RU');
            const messagesCount = conversation.messages.length;
            const successBadge = conversation.isSuccessful ? '<span class="success">‚úÖ –£–°–ü–ï–®–ù–´–ô</span>' : '';
            
            html += `
            <div class="dialog">
                <div class="dialog-header">
                    <h3>üë§ ${conversation.userName} (ID: ${userId}) ${successBadge}</h3>
                    <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity} | –°–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}</p>
                </div>
            `;
            
            conversation.messages.forEach(msg => {
                const messageClass = msg.role === 'user' ? 'user-message' : 'bot-message';
                const roleIcon = msg.role === 'user' ? 'üë§' : 'ü§ñ';
                const timestamp = new Date(msg.timestamp).toLocaleString('ru-RU');
                
                html += `
                <div class="message ${messageClass}">
                    <strong>${roleIcon} ${msg.role === 'user' ? conversation.userName : 'Skill Hunter Bot'}:</strong><br>
                    ${msg.content.replace(/\n/g, '<br>')}
                    <div class="timestamp">${timestamp}</div>
                </div>
                `;
            });
            
            html += '</div>';
        });
        
        html += '</body></html>';
        res.send(html);
        
    } catch (error) {
        res.status(500).send(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: ${error.message}`);
    }
});

app.get('/stats', async (req, res) => {
    try {
        const allDialogs = await getAllDialogs();
        const totalUsers = allDialogs.length;
        const successfulUsers = allDialogs.filter(d => d.conversation.isSuccessful).length;
        const totalMessages = allDialogs.reduce((sum, d) => sum + d.conversation.messages.length, 0);
        
        res.json({
            dailyStats: database.dailyStats,
            totalUsers: totalUsers,
            successfulUsers: successfulUsers,
            totalMessages: totalMessages,
            overallConversion: totalUsers > 0 ? Math.round((successfulUsers / totalUsers) * 100) : 0,
            successfulCases: database.successfulCases.length,
            storageType: db ? 'MongoDB' : 'Memory'
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', details: error.message });
    }
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(config.port, async () => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    await connectToMongoDB();
    
    console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
    console.log('Telegram –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω!');
    console.log('–°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è:', db ? 'MongoDB (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ)' : '–ü–∞–º—è—Ç—å (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    bot.stopPolling();
    process.exit(0);
});
