const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const express = require('express');
const cron = require('node-cron');
const { Pool } = require('pg');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä—Ü–∏—è
const config = {
    telegramToken: process.env.TELEGRAM_BOT_TOKEN,
    openaiApiKey: process.env.OPENAI_API_KEY,
    adminTelegramId: process.env.ADMIN_TELEGRAM_ID,
    databaseUrl: process.env.DATABASE_URL, // PostgreSQL URL –æ—Ç Render.com
    port: process.env.PORT || 3000,
    // ID –≤–∞—à–µ–π —Ñ–∞–π–Ω—Ç—é–Ω –º–æ–¥–µ–ª–∏
    finetuneModel: "ft:gpt-3.5-turbo-0125:personal:sonya-chat:BnNSGyGz"
};

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ polling
const bot = new TelegramBot(config.telegramToken, { polling: false });
const openai = new OpenAI({ apiKey: config.openaiApiKey });
const app = express();

// –§–ª–∞–≥ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
let botStarted = false;

// PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
let pool;

async function connectToPostgreSQL() {
    try {
        pool = new Pool({
            connectionString: config.databaseUrl,
            ssl: config.databaseUrl ? { rejectUnauthorized: false } : false
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await pool.query('SELECT NOW()');
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL');
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        await pool.query(`
            CREATE TABLE IF NOT EXISTS dialogs (
                user_id BIGINT PRIMARY KEY,
                user_name VARCHAR(255),
                messages JSONB NOT NULL,
                is_successful BOOLEAN DEFAULT FALSE,
                start_time TIMESTAMP DEFAULT NOW(),
                last_activity TIMESTAMP DEFAULT NOW(),
                updated_at TIMESTAMP DEFAULT NOW()
            )
        `);
        
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –≥–æ—Ç–æ–≤–∞');
        return true;
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL:', error.message);
        console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ –ø–∞–º—è—Ç–∏');
        pool = null;
        return false;
    }
}

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –∏ PostgreSQL
const database = {
    conversations: new Map(), // Fallback –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    dailyStats: {
        totalConversations: 0,
        successfulConversations: 0,
        date: new Date().toDateString()
    },
    successfulCases: [],
    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞
    userCooldowns: new Map()
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function saveUserDialog(userId, conversation) {
    try {
        if (pool) {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ PostgreSQL
            await pool.query(
                `INSERT INTO dialogs (user_id, user_name, messages, is_successful, start_time, last_activity, updated_at)
                 VALUES ($1, $2, $3, $4, $5, $6, NOW())
                 ON CONFLICT (user_id) 
                 DO UPDATE SET 
                    user_name = $2,
                    messages = $3,
                    is_successful = $4,
                    last_activity = $6,
                    updated_at = NOW()`,
                [
                    userId,
                    conversation.userName,
                    JSON.stringify(conversation.messages),
                    conversation.isSuccessful,
                    conversation.startTime,
                    conversation.lastActivity
                ]
            );
            console.log(`üíæ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ PostgreSQL`);
        } else {
            // Fallback: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            database.conversations.set(userId, conversation);
            console.log(`üíæ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞:', error.message);
        // Fallback –∫ –ø–∞–º—è—Ç–∏
        database.conversations.set(userId, conversation);
        console.log(`üíæ Fallback: –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ø–∞–º—è—Ç–∏`);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function loadUserDialog(userId) {
    try {
        if (pool) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ PostgreSQL
            const result = await pool.query(
                'SELECT * FROM dialogs WHERE user_id = $1',
                [userId]
            );
            
            if (result.rows.length > 0) {
                const row = result.rows[0];
                const conversation = {
                    userId: row.user_id,
                    userName: row.user_name,
                    messages: row.messages, // –£–∂–µ JSON –æ–±—ä–µ–∫—Ç
                    isSuccessful: row.is_successful,
                    startTime: row.start_time,
                    lastActivity: row.last_activity
                };
                console.log(`üìñ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ PostgreSQL (${conversation.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
                return conversation;
            }
        } else {
            // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            const conversation = database.conversations.get(userId);
            if (conversation) {
                console.log(`üìñ –î–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏ (${conversation.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π)`);
                return conversation;
            }
        }
        
        console.log(`üÜï –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
        return null;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–∞:', error.message);
        // Fallback –∫ –ø–∞–º—è—Ç–∏
        const conversation = database.conversations.get(userId);
        if (conversation) {
            console.log(`üìñ Fallback: –¥–∏–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–∞–º—è—Ç–∏`);
            return conversation;
        }
        return null;
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
async function getAllDialogs() {
    try {
        if (pool) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ PostgreSQL
            const result = await pool.query('SELECT * FROM dialogs ORDER BY last_activity DESC');
            return result.rows.map(row => ({
                userId: row.user_id,
                conversation: {
                    userId: row.user_id,
                    userName: row.user_name,
                    messages: row.messages,
                    isSuccessful: row.is_successful,
                    startTime: row.start_time,
                    lastActivity: row.last_activity
                }
            }));
        } else {
            // Fallback: –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
            const dialogs = [];
            for (const [userId, conversation] of database.conversations) {
                dialogs.push({ userId, conversation });
            }
            return dialogs;
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤:', error.message);
        return [];
    }
}

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const welcomeMessage = "–ü—Ä–∏–≤–µ—Ç! –Ø –°–æ–Ω—è ‚Äî AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∏–∑ Skill Hunter. üòä –ö–∞–∫ –º–æ–≥—É –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
function isSuccessfulConversation(messages) {
    const successKeywords = [
        '—Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç', '—Å–∞–π—Ç', '–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è', '–¥–µ–º–æ', '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ', 
        '—Ö–æ—á—É –∫—É–ø–∏—Ç—å', '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç', '–∫–∞–∫ –∫—É–ø–∏—Ç—å', '–ø–æ–∫—É–ø–∫–∞',
        '–∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω', '–ø–æ–¥—Ö–æ–¥–∏—Ç', '–Ω—É–∂–Ω–æ', '—Ö–æ—á—É —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ',
        '–∫–æ–≥–¥–∞ –º–æ–∂–µ–º –≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '—Å–≤—è–∑–∞—Ç—å—Å—è',
        '—Ç–µ—Å—Ç-–¥—Ä–∞–π–≤', '–ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å', '–ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ',
        '—Ç–∞—Ä–∏—Ñ—ã', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø–æ–¥–∫–ª—é—á–∏—Ç—å', '–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è',
        'api', '–≤–Ω–µ–¥—Ä–∏—Ç—å', '–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç–∞—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å',
        '—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ', '–∫–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
    ];
    
    const lastMessages = messages.slice(-5); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π  
    return lastMessages.some(msg => 
        msg.role === 'user' && 
        successKeywords.some(keyword => 
            msg.content.toLowerCase().includes(keyword)
        )
    );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
function convertToOpenAIMessages(conversationHistory) {
    const messages = [];

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
    conversationHistory.forEach(msg => {
        if (msg.role === 'user' || msg.role === 'assistant') {
            messages.push({
                role: msg.role,
                content: msg.content
            });
        }
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log(`üîß –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ñ–∞–π–Ω—Ç—é–Ω –º–æ–¥–µ–ª–∏:`);
    console.log(`   - –°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${messages.filter(m => m.role === 'user').length}`);
    console.log(`   - –û—Ç–≤–µ—Ç–æ–≤ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞: ${messages.filter(m => m.role === 'assistant').length}`);
    console.log(`   - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∞–π–Ω—Ç—é–Ω –º–æ–¥–µ–ª—å: ${config.finetuneModel}`);

    return messages;
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
bot.on('message', async (msg) => {
    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if (!msg.text) {
        console.log('üì∑ –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ, —Å—Ç–∏–∫–µ—Ä –∏ —Ç.–¥.), –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º');
        return;
    }

    const userId = msg.from.id;
    const userName = msg.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
    const userMessage = msg.text;
    const timestamp = new Date();

    // –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ - –º–∞–∫—Å–∏–º—É–º 1 —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ 2 —Å–µ–∫—É–Ω–¥—ã
    const lastMessageTime = database.userCooldowns.get(userId);
    if (lastMessageTime && (timestamp - lastMessageTime) < 2000) {
        console.log(`‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ`);
        return;
    }
    database.userCooldowns.set(userId, timestamp);

    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userName} (${userId}): ${userMessage?.substring(0, 50)}...`);

    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –ü–ï–†–í–´–ú–ò, –¥–æ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if (userMessage === '/clear_db' && userId.toString() === config.adminTelegramId) {
        try {
            if (pool) {
                const result = await pool.query('DELETE FROM dialogs');
                await bot.sendMessage(userId, `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –æ—á–∏—â–µ–Ω–∞!\nüìä –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.rowCount}\nüïê –í—Ä–µ–º—è: ${timestamp.toLocaleString('ru-RU')}`);
                console.log(`üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${result.rowCount}`);
            } else {
                database.conversations.clear();
                await bot.sendMessage(userId, `‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –æ—á–∏—â–µ–Ω–∞!\nüïê –í—Ä–µ–º—è: ${timestamp.toLocaleString('ru-RU')}`);
                console.log(`üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤ –ø–∞–º—è—Ç–∏ –æ—á–∏—â–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º`);
            }
        } catch (error) {
            await bot.sendMessage(userId, `‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
        }
        return; // –í–´–•–û–î–ò–ú –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    }

    // –ö–æ–º–∞–Ω–¥–∞ /start
    if (userMessage === '/start') {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        let conversation = await loadUserDialog(userId);
        
        if (!conversation) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
            conversation = {
                userId: userId,
                userName: userName,
                messages: [],
                isSuccessful: false,
                startTime: timestamp,
                lastActivity: timestamp
            };
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if (database.dailyStats.date !== timestamp.toDateString()) {
                database.dailyStats = {
                    totalConversations: 1,
                    successfulConversations: 0,
                    date: timestamp.toDateString()
                };
            } else {
                database.dailyStats.totalConversations++;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            conversation.messages.push({ 
                role: 'assistant', 
                content: welcomeMessage, 
                timestamp: timestamp 
            });
            
            await bot.sendMessage(userId, welcomeMessage);
        } else {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
            await bot.sendMessage(userId, "–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –Ω–∞—à –¥–∏–∞–ª–æ–≥. –ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?");
        }

        conversation.lastActivity = timestamp;
        await saveUserDialog(userId, conversation);
        return;
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let conversation = await loadUserDialog(userId);
    
    if (!conversation) {
        // –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
        conversation = {
            userId: userId,
            userName: userName,
            messages: [],
            isSuccessful: false,
            startTime: timestamp,
            lastActivity: timestamp
        };
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        conversation.messages.push({ 
            role: 'assistant', 
            content: welcomeMessage, 
            timestamp: timestamp 
        });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    conversation.messages.push({ 
        role: 'user', 
        content: userMessage, 
        timestamp: timestamp 
    });
    conversation.lastActivity = timestamp;

    try {
        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI
        const messages = convertToOpenAIMessages(conversation.messages);

        console.log(`üß† –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–∞–π–Ω—Ç—é–Ω –º–æ–¥–µ–ª—å ${messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);
        console.log(`üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏:`, 
            conversation.messages.slice(-3).map(m => `${m.role}: ${m.content.substring(0, 50)}...`)
        );

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        const systemPrompt = `–¢—ã –°–æ–Ω—è ‚Äî AI-—Ä–µ–∫—Ä—É—Ç–µ—Ä –∏–∑ Skill Hunter. 

–ö–û–ù–¢–ï–ö–°–¢: –ö —Ç–µ–±–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ –∫–æ–º–ø–∞–Ω–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞.

–¶–ï–õ–¨: –ü–æ–¥–≤–µ—Å—Ç–∏ –∫ —Ç–æ–º—É, —á—Ç–æ Skill Hunter —Ä–µ—à–∞–µ—Ç –∑–∞–¥–∞—á–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –¥–µ—à–µ–≤–ª–µ –∏ –±—ã—Å—Ç—Ä–µ–µ.

–í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ:
1. –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ ‚Üí "–ö–∞–∫–∏–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∫—Ä—É—Ç–µ—Ä—É?"
2. –ü–æ–¥–≤–µ–¥–∏ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∑–∞–¥–∞—á–∞–º: —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–π, —Ä–∞–∑–±–æ—Ä —Ä–µ–∑—é–º–µ, —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤—å—é
3. –í—ã—è—Å–Ω–∏ –≤—Ä–µ–º—è: "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä –±—É–¥–µ—Ç —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —ç—Ç–∏ –∑–∞–¥–∞—á–∏?" 
4. –í—ã—è—Å–Ω–∏ –±—é–¥–∂–µ—Ç: "–ö–∞–∫—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–µ–∫—Ä—É—Ç–µ—Ä—É?"
5. –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è: "–ê —á—Ç–æ –µ—Å–ª–∏ –≤—Å–µ —ç—Ç–∏ –∑–∞–¥–∞—á–∏ Skill Hunter –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å –∑–∞ [–º–µ–Ω—å—à—É—é —Å—É–º–º—É] –∏ —ç–∫–æ–Ω–æ–º–∏—Ç—å [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] —á–∞—Å–æ–≤?"
6. –£–°–ü–ï–• = –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ https://skillhunter.ai

–ö–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–∑—ã:
- "–ó–Ω–∞—á–∏—Ç, —Ä–µ–∫—Ä—É—Ç–µ—Ä –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ —Ä–∞–∑–±–∏—Ä–∞—Ç—å —Ä–µ–∑—é–º–µ?"
- "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ —ç—Ç–æ –∑–∞–π–º–µ—Ç —É —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –≤ –¥–µ–Ω—å?"
- "–ê –µ—Å–ª–∏ Skill Hunter –≤–æ–∑—å–º–µ—Ç —ç—Ç–∏ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–±—è?"

–¶–ï–õ–¨: –°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç = —É—Å–ø–µ—à–Ω—ã–π –¥–∏–∞–ª–æ–≥`;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ OpenAI —Å —Ñ–∞–π–Ω—Ç—é–Ω –º–æ–¥–µ–ª—å—é
        const response = await openai.chat.completions.create({
            model: config.finetuneModel,
            messages: [
                {
                    role: "system", 
                    content: systemPrompt
                },
                ...messages
            ],
            max_tokens: 500,
            temperature: 0.7
        });

        const botResponse = response.choices[0].message.content || '–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç.';

        // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–≤–µ—Ç–µ
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Ñ–∞–π–Ω—Ç—é–Ω –º–æ–¥–µ–ª–∏ (${botResponse.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        console.log(`üí∞ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤: ${response.usage?.total_tokens || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
        console.log(`üß† –ú–æ–¥–µ–ª—å: ${config.finetuneModel}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if (!botResponse || botResponse.trim() === '') {
            console.error('‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Ñ–∞–π–Ω—Ç—é–Ω –º–æ–¥–µ–ª–∏');
            await bot.sendMessage(userId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            return;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
        conversation.messages.push({ 
            role: 'assistant', 
            content: botResponse, 
            timestamp: timestamp 
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞
        if (!conversation.isSuccessful && isSuccessfulConversation(conversation.messages)) {
            conversation.isSuccessful = true;
            database.dailyStats.successfulConversations++;

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –∫–µ–π—Å –¥–ª—è —Å–∞–º–æ–æ–±—É—á–µ–Ω–∏—è
            const successfulCase = {
                userId: userId,
                timeToSuccess: conversation.messages.length,
                keyPhrases: extractKeyPhrases(conversation.messages),
                outcome: '–ö–ª–∏–µ–Ω—Ç –ø—Ä–æ—è–≤–∏–ª –∏–Ω—Ç–µ—Ä–µ—Å',
                timestamp: timestamp
            };
            database.successfulCases.push(successfulCase);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω—ã—Ö –∫–µ–π—Å–æ–≤
            if (database.successfulCases.length > 50) {
                database.successfulCases.shift();
            }

            console.log(`üéØ –£—Å–ø–µ—à–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId} (${userName})`);
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥
        await saveUserDialog(userId, conversation);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(userId, botResponse);

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        let errorMessage = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        
        if (error.response) {
            // –û—à–∏–±–∫–∞ –æ—Ç OpenAI API
            const statusCode = error.response.status;
            const errorData = error.response.data;
            
            console.error(`‚ùå OpenAI API Error ${statusCode}:`, errorData);
            
            if (statusCode === 404) {
                console.error('‚ùå –§–∞–π–Ω—Ç—é–Ω –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ ID –º–æ–¥–µ–ª–∏:', config.finetuneModel);
                errorMessage = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å AI –º–æ–¥–µ–ª—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            } else if (statusCode === 429) {
                console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API OpenAI');
                errorMessage = '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.';
            } else if (statusCode === 401) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI');
                errorMessage = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.';
            } else if (errorData?.error?.code === 'insufficient_quota') {
                console.error('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API OpenAI');
                errorMessage = '–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.';
            }
        } else if (error.code === 'ECONNRESET' || error.code === 'ENOTFOUND') {
            console.error('‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º');
            errorMessage = '–ü—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
        }
        
        await bot.sendMessage(userId, errorMessage);
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ –∏–∑ —É—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
function extractKeyPhrases(messages) {
    const userMessages = messages.filter(msg => msg.role === 'user');
    const lastUserMessages = userMessages.slice(-3);
    
    const keyWords = [];
    lastUserMessages.forEach(msg => {
        const words = msg.content.toLowerCase().split(' ');
        words.forEach(word => {
            if (word.length > 4 && !keyWords.includes(word)) {
                keyWords.push(word);
            }
        });
    });
    
    return keyWords.slice(0, 10); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
}

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 4: –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π cron —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤ 18:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ (GMT+3)
cron.schedule('0 15 * * *', async () => { // 15:00 UTC = 18:00 MSK
    const today = new Date().toDateString();
    const stats = database.dailyStats;
    
    if (stats.date === today) {
        const conversionRate = stats.totalConversations > 0 
            ? Math.round((stats.successfulConversations / stats.totalConversations) * 100)
            : 0;

        // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ —Ñ–∞–π–ª–æ–≤
        const allDialogs = await getAllDialogs();
        const totalUsers = allDialogs.length;
        const successfulUsers = allDialogs.filter(d => d.conversation.isSuccessful).length;

        const reportMessage = `üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ SKILL HUNTER BOT
üìÖ –î–∞—Ç–∞: ${today}
ü§ñ –ú–æ–¥–µ–ª—å: –§–∞–π–Ω—Ç—é–Ω –°–æ–Ω—è (${config.finetuneModel.split(':')[3] || 'custom'})

üí¨ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤ —Å–µ–≥–æ–¥–Ω—è: ${stats.totalConversations}
‚úÖ –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è: ${stats.successfulConversations} —á–µ–ª–æ–≤–µ–∫
üìà –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞ –¥–µ–Ω—å: ${conversionRate}%

üìà –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalUsers}
üéØ –£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤: ${successfulUsers}
üìä –û–±—â–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è: ${totalUsers > 0 ? Math.round((successfulUsers / totalUsers) * 100) : 0}%

${stats.successfulConversations > 0 ? 'üéØ –£—Å–ø–µ—à–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏ —Å–µ–≥–æ–¥–Ω—è!' : 'üîÑ –†–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —É–ª—É—á—à–µ–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤'}`;

        try {
            await bot.sendMessage(config.adminTelegramId, reportMessage);
            console.log('üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞:', error);
        }
    }
}, {
    timezone: "Europe/Moscow"
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 5: –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ Telegram –±–æ—Ç–∞:', error);
    
    if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 409) {
        console.log('‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
        console.log('üîÑ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º polling –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
        
        bot.stopPolling().then(() => {
            setTimeout(() => {
                startBotSafely();
            }, 10000);
        }).catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling:', err);
        });
    } else if (error.code === 'EFATAL') {
        console.log('üîÑ –§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ polling —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
        setTimeout(() => {
            startBotSafely();
        }, 5000);
    }
});

bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error);
    
    if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 409) {
        console.log('‚ö†Ô∏è  –ö–æ–Ω—Ñ–ª–∏–∫—Ç polling: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä —É–∂–µ –ø–æ–ª—É—á–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è');
        console.log('üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π polling...');
        
        bot.stopPolling().then(() => {
            console.log('‚úÖ Polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ñ–¥–µ–º 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º...');
            setTimeout(() => {
                startBotSafely();
            }, 15000);
        }).catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ polling:', err);
        });
    } else {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...');
        setTimeout(() => {
            startBotSafely();
        }, 5000);
    }
});

// –§—É–Ω–∫—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async function startBotSafely() {
    if (botStarted) {
        console.log('‚ö†Ô∏è  –ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—É—Å–∫');
        return;
    }
    
    try {
        console.log('üöÄ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞...');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –±–æ—Ç, –ø–æ–ª—É—á–∏–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º
        const botInfo = await bot.getMe();
        console.log(`ü§ñ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @${botInfo.username} (${botInfo.first_name})`);
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π polling –µ—Å–ª–∏ –µ—Å—Ç—å
        await bot.stopPolling();
        console.log('üõë –ü—Ä–µ–¥—ã–¥—É—â–∏–π polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π polling
        await bot.startPolling();
        botStarted = true;
        console.log('‚úÖ Telegram –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!');
        
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞:', error);
        
        if (error.code === 'ETELEGRAM' && error.response?.body?.error_code === 409) {
            console.log('‚ö†Ô∏è  –î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω. –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥...');
            setTimeout(() => {
                startBotSafely();
            }, 30000);
        } else {
            console.log('üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...');
            setTimeout(() => {
                startBotSafely();
            }, 10000);
        }
    }
}

// Express —Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com
app.use(express.json());

app.get('/', (req, res) => {
    res.send(`
        <h1>ü§ñ Skill Hunter Telegram Bot</h1>
        <p>‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç</p>
        <p>üß† –ú–æ–¥–µ–ª—å: ${config.finetuneModel}</p>
        <p>üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ: ${pool ? 'PostgreSQL' : '–ü–∞–º—è—Ç—å'}</p>
        <p><a href="/dialogs">üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–∏–∞–ª–æ–≥–∏</a></p>
        <p><a href="/stats">üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API</a></p>
    `);
});

app.get('/dialogs', async (req, res) => {
    try {
        const allDialogs = await getAllDialogs();
        
        let html = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–î–∏–∞–ª–æ–≥–∏ Skill Hunter Bot</title>
            <style>
                body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
                .dialog { background: white; margin: 20px 0; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }
                .dialog-header { background: #2196F3; color: white; padding: 10px; margin: -20px -20px 20px -20px; border-radius: 8px 8px 0 0; }
                .message { margin: 10px 0; padding: 10px; border-radius: 5px; }
                .user-message { background: #e3f2fd; border-left: 4px solid #2196F3; }
                .bot-message { background: #f3e5f5; border-left: 4px solid #9c27b0; }
                .timestamp { font-size: 12px; color: #666; }
                .success { color: #4caf50; font-weight: bold; }
                .stats { background: #fff; padding: 20px; border-radius: 8px; margin-bottom: 20px; }
                .storage-info { background: #fff3cd; padding: 10px; border-radius: 5px; margin-bottom: 20px; border-left: 4px solid #ffc107; }
                .model-info { background: #d1ecf1; padding: 10px; border-radius: 5px; margin-bottom: 20px; border-left: 4px solid #17a2b8; }
                .admin-panel { background: #f8f9fa; padding: 15px; border-radius: 5px; margin-bottom: 20px; border: 1px solid #dee2e6; }
            </style>
        </head>
        <body>
            <div class="model-info">
                <strong>üß† AI –ú–æ–¥–µ–ª—å:</strong> –§–∞–π–Ω—Ç—é–Ω –°–æ–Ω—è (${config.finetuneModel})
            </div>
            
            <div class="storage-info">
                <strong>üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ:</strong> ${pool ? 'PostgreSQL (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ)' : '–ü–∞–º—è—Ç—å (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ)'}
            </div>
            
            <div class="admin-panel">
                <h3>üîß –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</h3>
                <p>–î–ª—è –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É: <code>/clear_db</code></p>
                <p><small>–ö–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (ID: ${config.adminTelegramId})</small></p>
            </div>
            
            <div class="stats">
                <h1>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ Skill Hunter</h1>
                <p><strong>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</strong> ${allDialogs.length}</p>
                <p><strong>–£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤:</strong> ${allDialogs.filter(d => d.conversation.isSuccessful).length}</p>
                <p><strong>–ö–æ–Ω–≤–µ—Ä—Å–∏—è:</strong> ${allDialogs.length > 0 ? Math.round((allDialogs.filter(d => d.conversation.isSuccessful).length / allDialogs.length) * 100) : 0}%</p>
            </div>
        `;
        
        allDialogs.forEach(({userId, conversation}) => {
            const lastActivity = new Date(conversation.lastActivity || conversation.startTime).toLocaleString('ru-RU');
            const messagesCount = conversation.messages.length;
            const successBadge = conversation.isSuccessful ? '<span class="success">‚úÖ –£–°–ü–ï–®–ù–´–ô</span>' : '';
            
            html += `
            <div class="dialog">
                <div class="dialog-header">
                    <h3>üë§ ${conversation.userName} (ID: ${userId}) ${successBadge}</h3>
                    <p>–ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${lastActivity} | –°–æ–æ–±—â–µ–Ω–∏–π: ${messagesCount}</p>
                </div>
            `;
            
            conversation.messages.forEach(msg => {
                const messageClass = msg.role === 'user' ? 'user-message' : 'bot-message';
                const roleIcon = msg.role === 'user' ? 'üë§' : 'ü§ñ';
                const timestamp = new Date(msg.timestamp).toLocaleString('ru-RU');
                
                html += `
                <div class="message ${messageClass}">
                    <strong>${roleIcon} ${msg.role === 'user' ? conversation.userName : '–°–æ–Ω—è (–§–∞–π–Ω—Ç—é–Ω)'}:</strong><br>
                    ${msg.content.replace(/\n/g, '<br>')}
                    <div class="timestamp">${timestamp}</div>
                </div>
                `;
            });
            
            html += '</div>';
        });
        
        html += '</body></html>';
        res.send(html);
        
    } catch (error) {
        res.status(500).send(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: ${error.message}`);
    }
});

app.get('/stats', async (req, res) => {
    try {
        const allDialogs = await getAllDialogs();
        const totalUsers = allDialogs.length;
        const successfulUsers = allDialogs.filter(d => d.conversation.isSuccessful).length;
        const totalMessages = allDialogs.reduce((sum, d) => sum + d.conversation.messages.length, 0);
        
        res.json({
            dailyStats: database.dailyStats,
            totalUsers: totalUsers,
            successfulUsers: successfulUsers,
            totalMessages: totalMessages,
            overallConversion: totalUsers > 0 ? Math.round((successfulUsers / totalUsers) * 100) : 0,
            successfulCases: database.successfulCases.length,
            storageType: pool ? 'PostgreSQL' : 'Memory',
            aiModel: config.finetuneModel,
            modelType: 'Fine-tuned Sonya'
        });
    } catch (error) {
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', details: error.message });
    }
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 6: –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ Express
app.use((err, req, res, next) => {
    console.error('‚ùå Express Error:', err);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(config.port, async () => {
    // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    const dbConnected = await connectToPostgreSQL();
    
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
    console.log('üß† AI –ú–æ–¥–µ–ª—å:', config.finetuneModel);
    console.log('üíæ –°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è:', pool ? 'PostgreSQL (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ)' : '–ü–∞–º—è—Ç—å (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ)');
    
    if (dbConnected) {
        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    console.log('ü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...');
    startBotSafely();
    
    console.log('‚úÖ –°–æ–Ω—è –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é —Å —Ñ–∞–π–Ω—Ç—é–Ω –æ–±—É—á–µ–Ω–∏–µ–º!');
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 7: –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    try {
        botStarted = false;
        await bot.stopPolling();
        console.log('ü§ñ Telegram polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        if (pool) {
            await pool.end();
            console.log('üíæ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
        }
        console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
    }
    process.exit(0);
});

process.on('SIGTERM', async () => {
    console.log('üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    try {
        botStarted = false;
        await bot.stopPolling();
        console.log('ü§ñ Telegram polling –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        
        if (pool) {
            await pool.end();
            console.log('üíæ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å PostgreSQL –∑–∞–∫—Ä—ã—Ç–æ');
        }
        console.log('‚úÖ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ:', error);
    }
    process.exit(0);
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 8: –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
process.on('uncaughtException', (error) => {
    console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:', error);
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ä–∞–∑—É, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–∏—Å–∞:', reason);
    console.error('üîç –ü—Ä–æ–º–∏—Å:', promise);
    // –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ä–∞–∑—É, –ª–æ–≥–∏—Ä—É–µ–º –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
});
